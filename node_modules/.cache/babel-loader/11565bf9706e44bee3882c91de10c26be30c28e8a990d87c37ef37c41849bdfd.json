{"ast":null,"code":"import * as yup from \"yup\";\nimport isValidDate from \"./isValidDate\";\nexport const userSchema = yup.object().shape({\n  name: yup.string().required(\"Name is required\"),\n  marriage: yup.string().oneOf([\"Single\", \"Married\", \"Prefer not to say\"], \"Please select a valid option\").required(\"Marriage status is required\"),\n  employment: yup.string().oneOf([\"Employed\", \"Unemployed\", \"Self-Employed\"], \"Please select a valid option\").required(\"Employment status is required\"),\n  companyName: yup.string().when(\"employment\", {\n    is: \"Unemployed\",\n    then: yup.string().notRequired(),\n    otherwise: yup.string().required(\"Employer name is required\")\n  }),\n  dob: yup.string().matches(/^(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/](19|20)\\d\\d$/, \"Date format should be dd/mm/yyyy\").test(\"valid-date\", \"Invalid date, Age must be over 18\", value => {\n    const [day, month, year] = value.split(\"/\");\n    return isValidDate(+day, +month, +year);\n  }).required(\"Date of birth is required\"),\n  idType: yup.string().oneOf([\"Passport\", \"NHIS\", \"Driver's License\"], \"Please select a valid option\").required(\"ID type is required\"),\n  idNumber: yup.string().min(6, \"6 charaters or more\").required(\"ID Number is required\"),\n  phone: yup.string().min(10, \"Phone number must be 10 digits\").max(10, \"Phone number must be 10 digits\").required(\"Phone number is required\"),\n  address: yup.string().required(\"Address is required\")\n});","map":{"version":3,"names":["yup","isValidDate","userSchema","object","shape","name","string","required","marriage","oneOf","employment","companyName","when","is","then","notRequired","otherwise","dob","matches","test","value","day","month","year","split","idType","idNumber","min","phone","max","address"],"sources":["/Users/cybercyber/Documents/projects/afrifanom/client/src/validations/CustomerValidation.js"],"sourcesContent":["import * as yup from \"yup\";\nimport isValidDate from \"./isValidDate\";\n\nexport const userSchema = yup.object().shape({\n  name: yup.string().required(\"Name is required\"),\n  marriage: yup\n    .string()\n    .oneOf(\n      [\"Single\", \"Married\", \"Prefer not to say\"],\n      \"Please select a valid option\"\n    )\n    .required(\"Marriage status is required\"),\n  employment: yup\n    .string()\n    .oneOf(\n      [\"Employed\", \"Unemployed\", \"Self-Employed\"],\n      \"Please select a valid option\"\n    )\n    .required(\"Employment status is required\"),\n  companyName: yup.string().when(\"employment\", {\n    is: \"Unemployed\",\n    then: yup.string().notRequired(),\n    otherwise: yup.string().required(\"Employer name is required\"),\n  }),\n  dob: yup\n    .string()\n    .matches(\n      /^(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/](19|20)\\d\\d$/,\n      \"Date format should be dd/mm/yyyy\"\n    )\n    .test(\"valid-date\", \"Invalid date, Age must be over 18\", (value) => {\n      const [day, month, year] = value.split(\"/\");\n      return isValidDate(+day, +month, +year);\n    })\n    .required(\"Date of birth is required\"),\n\n  idType: yup\n    .string()\n    .oneOf(\n      [\"Passport\", \"NHIS\", \"Driver's License\"],\n      \"Please select a valid option\"\n    )\n    .required(\"ID type is required\"),\n  idNumber: yup\n    .string()\n    .min(6, \"6 charaters or more\")\n    .required(\"ID Number is required\"),\n  phone: yup\n    .string()\n    .min(10, \"Phone number must be 10 digits\")\n    .max(10, \"Phone number must be 10 digits\")\n    .required(\"Phone number is required\"),\n  address: yup.string().required(\"Address is required\"),\n});\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,OAAOC,WAAW,MAAM,eAAe;AAEvC,OAAO,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EAC3CC,IAAI,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACC,QAAQ,CAAC,kBAAkB,CAAC;EAC/CC,QAAQ,EAAER,GAAG,CACVM,MAAM,EAAE,CACRG,KAAK,CACJ,CAAC,QAAQ,EAAE,SAAS,EAAE,mBAAmB,CAAC,EAC1C,8BAA8B,CAC/B,CACAF,QAAQ,CAAC,6BAA6B,CAAC;EAC1CG,UAAU,EAAEV,GAAG,CACZM,MAAM,EAAE,CACRG,KAAK,CACJ,CAAC,UAAU,EAAE,YAAY,EAAE,eAAe,CAAC,EAC3C,8BAA8B,CAC/B,CACAF,QAAQ,CAAC,+BAA+B,CAAC;EAC5CI,WAAW,EAAEX,GAAG,CAACM,MAAM,EAAE,CAACM,IAAI,CAAC,YAAY,EAAE;IAC3CC,EAAE,EAAE,YAAY;IAChBC,IAAI,EAAEd,GAAG,CAACM,MAAM,EAAE,CAACS,WAAW,EAAE;IAChCC,SAAS,EAAEhB,GAAG,CAACM,MAAM,EAAE,CAACC,QAAQ,CAAC,2BAA2B;EAC9D,CAAC,CAAC;EACFU,GAAG,EAAEjB,GAAG,CACLM,MAAM,EAAE,CACRY,OAAO,CACN,4DAA4D,EAC5D,kCAAkC,CACnC,CACAC,IAAI,CAAC,YAAY,EAAE,mCAAmC,EAAGC,KAAK,IAAK;IAClE,MAAM,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC;IAC3C,OAAOvB,WAAW,CAAC,CAACoB,GAAG,EAAE,CAACC,KAAK,EAAE,CAACC,IAAI,CAAC;EACzC,CAAC,CAAC,CACDhB,QAAQ,CAAC,2BAA2B,CAAC;EAExCkB,MAAM,EAAEzB,GAAG,CACRM,MAAM,EAAE,CACRG,KAAK,CACJ,CAAC,UAAU,EAAE,MAAM,EAAE,kBAAkB,CAAC,EACxC,8BAA8B,CAC/B,CACAF,QAAQ,CAAC,qBAAqB,CAAC;EAClCmB,QAAQ,EAAE1B,GAAG,CACVM,MAAM,EAAE,CACRqB,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAC7BpB,QAAQ,CAAC,uBAAuB,CAAC;EACpCqB,KAAK,EAAE5B,GAAG,CACPM,MAAM,EAAE,CACRqB,GAAG,CAAC,EAAE,EAAE,gCAAgC,CAAC,CACzCE,GAAG,CAAC,EAAE,EAAE,gCAAgC,CAAC,CACzCtB,QAAQ,CAAC,0BAA0B,CAAC;EACvCuB,OAAO,EAAE9B,GAAG,CAACM,MAAM,EAAE,CAACC,QAAQ,CAAC,qBAAqB;AACtD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}